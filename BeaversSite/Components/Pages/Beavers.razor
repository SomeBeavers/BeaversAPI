@page "/beavers"
@rendermode InteractiveServer
@using API.Models
@inject HttpClient Http
<h3>Beavers</h3>
<button @onclick="StartAddingBeaver">Add Beaver</button>
@if (beavers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Fluffiness</th>
                <th>Size</th>
                <th></th> <!-- For the Edit button -->
            </tr>
        </thead>
        <tbody>
            @foreach (var beaver in beavers)
            {
                <tr>
                    <td>@beaver.Id</td>
                    <td>@beaver.Name</td>
                    <td>@beaver.Fluffiness</td>
                    <td>@beaver.Size</td>
                    <td>
	                    <button @onclick="() => StartEditing(beaver)">Edit</button>
                        
                    </td>
                </tr>
                if (editingBeaver == beaver)
                {
                    <tr>
                        <td colspan="5">
                            <div>
                                <label>Name: <input @bind="editingBeaver.Name" /></label>
                                <label>Fluffiness: <input @bind="editingBeaver.Fluffiness" /></label>
                                <label>Size: <input @bind="editingBeaver.Size" /></label>
                                <button @onclick="SaveBeaver">Save</button>
                            </div>
                        </td>
                    </tr>
                }
            }
            @if (addingBeaver != null)
            {
	            <tr>
		            <td></td>
		            <td><input @bind="addingBeaver.Name" /></td>
		            <td><input @bind="addingBeaver.Fluffiness" /></td>
		            <td><input @bind="addingBeaver.Size" /></td>
		            <td><button @onclick="AddBeaver">Save</button></td>
	            </tr>
            }
        </tbody>
    </table>
}
@code {
    private BeaverModel[] beavers;
    private BeaverModel editingBeaver;
    private BeaverModel addingBeaver;
    protected override async Task OnInitializedAsync()
    {
        beavers = await Http.GetFromJsonAsync<BeaverModel[]>("api/Beavers");
    }
    void StartEditing(BeaverModel beaver)
    {
        editingBeaver = beaver;
    }

    void StartAddingBeaver()
    {
        addingBeaver = new BeaverModel();
    }
    async Task AddBeaver()
    {
        var response = await Http.PostAsJsonAsync("api/Beavers", addingBeaver);
        if (response.IsSuccessStatusCode)
        {
            // Refresh the list of beavers
            beavers = await Http.GetFromJsonAsync<BeaverModel[]>("api/Beavers");
            addingBeaver = null;
        }
        else
        {


        }
    }

    async Task SaveBeaver()
    {
        await Http.PutAsJsonAsync($"api/Beavers/{editingBeaver.Id}", editingBeaver);
        editingBeaver = null;
    }
}
